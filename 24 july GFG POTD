problem of the day statment:-
Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.

Right view of following tree is 1 3 7 8.

          1
       /     \
     2         3
   /   \      /    \
  4     5    6       7
    \
     8

Example 1:

Input:
       1
    /    \
   3      2
Output: 1 2
Example 2:

Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60
Your Task:
Just complete the function rightView() that takes node as parameter and returns the right view as a list. 

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Height of the Tree).

Constraints:
1 ≤ Number of nodes ≤ 105
0 ≤ Data of a node ≤ 105

////////////////////////////////////////////////////////////////////////////////////////////////////////////

SOLUTION FOR THIS PROBLEM IS:

class Solution:
    
    #Function to get the right view of the binary tree.
    def rightViewUtil(self,result, root, level, max_level): 
          
        #if root is null, we simply return. 
        if root is None: 
            return
          
        #if this is the last node of its level then it is in the right view.
        if (max_level[0] < level):
            
            #storing data of current node in list.
            result.append(root.data) 
            max_level[0] = level 
      
        #calling function recursively for right and left 
        #subtrees of current node.
        self.rightViewUtil(result, root.right, level+1, max_level) 
        self.rightViewUtil(result, root.left, level+1, max_level) 
    
    #Function to return list containing elements of right view of binary tree. 
    def rightView(self,root): 
        max_level = [0] 
        result = []
        self.rightViewUtil(result,root, 1, max_level) 
        #returning the list.
        return result

///////////////////////////////////////////////////////////////////////////////////////////////////////////
